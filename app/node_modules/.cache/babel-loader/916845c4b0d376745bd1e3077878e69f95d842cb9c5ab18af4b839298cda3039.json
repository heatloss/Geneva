{"ast":null,"code":"import PropTypes from 'prop-types';\n\n/*\nutils to handle common logic related to adding borders to components via PropTypes\n*/\nfunction generateBorderPropTypes({\n  denylist = []\n} = {}) {\n  const shape = {\n    top: PropTypes.bool,\n    right: PropTypes.bool,\n    bottom: PropTypes.bool,\n    left: PropTypes.bool\n  };\n  denylist.forEach(k => {\n    delete shape[k];\n  });\n  return PropTypes.shape(shape);\n}\nconst borderPropTypes = generateBorderPropTypes();\n\n/**\n * Given the spacing props, returns an array of CSS classes to apply the padding/margin\n * @param {object} settings The margin or padding props\n * @returns {array} array of CSS classes\n */\nfunction getBorder(settings) {\n  const finalSettings = {\n    ...settings\n  };\n  if (!finalSettings) return null;\n  const settingsArray = Object.keys(finalSettings);\n  if (settingsArray.length === 0) return null;\n  const sidemap = {\n    top: 't',\n    left: 'l',\n    right: 'r',\n    bottom: 'b'\n  };\n  return settingsArray.map(side => `st_border--${sidemap[side]}`);\n}\n\n/**\n * Given an object with props from user, returns a new object that removes\n * all properties that are disallowed\n *\n * @param {object} settings the border props provided to component\n * @param {array} denylist array of strings with name of disallowed props\n */\nfunction sanitizeProps(settings, denylist = []) {\n  const newSettings = {\n    ...settings\n  };\n  Object.keys(settings).forEach(k => {\n    if (denylist.includes(k)) delete newSettings[k];\n  });\n  return newSettings;\n}\n\n/*\ngiven array of original css class arrays\nand margin PropTypes\nreturn new array with margin classes, or the original aray\n*/\nfunction addBorderClasses(border, cssClasses = [], denylist = []) {\n  if (!border || Object.keys(border).length === 0) return cssClasses;\n  return (cssClasses || []).concat(getBorder(sanitizeProps(border, denylist) || []));\n}\nexport { addBorderClasses as a, borderPropTypes as b };","map":{"version":3,"names":["PropTypes","generateBorderPropTypes","denylist","shape","top","bool","right","bottom","left","forEach","k","borderPropTypes","getBorder","settings","finalSettings","settingsArray","Object","keys","length","sidemap","map","side","sanitizeProps","newSettings","includes","addBorderClasses","border","cssClasses","concat","a","b"],"sources":["/Users/mike/node_modules/@screentone/core/es/border-f9778fe0.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\n/*\nutils to handle common logic related to adding borders to components via PropTypes\n*/\nfunction generateBorderPropTypes({\n  denylist = []\n} = {}) {\n  const shape = {\n    top: PropTypes.bool,\n    right: PropTypes.bool,\n    bottom: PropTypes.bool,\n    left: PropTypes.bool\n  };\n  denylist.forEach(k => {\n    delete shape[k];\n  });\n  return PropTypes.shape(shape);\n}\nconst borderPropTypes = generateBorderPropTypes();\n\n/**\n * Given the spacing props, returns an array of CSS classes to apply the padding/margin\n * @param {object} settings The margin or padding props\n * @returns {array} array of CSS classes\n */\nfunction getBorder(settings) {\n  const finalSettings = {\n    ...settings\n  };\n  if (!finalSettings) return null;\n  const settingsArray = Object.keys(finalSettings);\n  if (settingsArray.length === 0) return null;\n  const sidemap = {\n    top: 't',\n    left: 'l',\n    right: 'r',\n    bottom: 'b'\n  };\n  return settingsArray.map(side => `st_border--${sidemap[side]}`);\n}\n\n/**\n * Given an object with props from user, returns a new object that removes\n * all properties that are disallowed\n *\n * @param {object} settings the border props provided to component\n * @param {array} denylist array of strings with name of disallowed props\n */\nfunction sanitizeProps(settings, denylist = []) {\n  const newSettings = {\n    ...settings\n  };\n  Object.keys(settings).forEach(k => {\n    if (denylist.includes(k)) delete newSettings[k];\n  });\n  return newSettings;\n}\n\n/*\ngiven array of original css class arrays\nand margin PropTypes\nreturn new array with margin classes, or the original aray\n*/\nfunction addBorderClasses(border, cssClasses = [], denylist = []) {\n  if (!border || Object.keys(border).length === 0) return cssClasses;\n  return (cssClasses || []).concat(getBorder(sanitizeProps(border, denylist) || []));\n}\n\nexport { addBorderClasses as a, borderPropTypes as b };\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;;AAElC;AACA;AACA;AACA,SAASC,uBAAuBA,CAAC;EAC/BC,QAAQ,GAAG;AACb,CAAC,GAAG,CAAC,CAAC,EAAE;EACN,MAAMC,KAAK,GAAG;IACZC,GAAG,EAAEJ,SAAS,CAACK,IAAI;IACnBC,KAAK,EAAEN,SAAS,CAACK,IAAI;IACrBE,MAAM,EAAEP,SAAS,CAACK,IAAI;IACtBG,IAAI,EAAER,SAAS,CAACK;EAClB,CAAC;EACDH,QAAQ,CAACO,OAAO,CAACC,CAAC,IAAI;IACpB,OAAOP,KAAK,CAACO,CAAC,CAAC;EACjB,CAAC,CAAC;EACF,OAAOV,SAAS,CAACG,KAAK,CAACA,KAAK,CAAC;AAC/B;AACA,MAAMQ,eAAe,GAAGV,uBAAuB,CAAC,CAAC;;AAEjD;AACA;AACA;AACA;AACA;AACA,SAASW,SAASA,CAACC,QAAQ,EAAE;EAC3B,MAAMC,aAAa,GAAG;IACpB,GAAGD;EACL,CAAC;EACD,IAAI,CAACC,aAAa,EAAE,OAAO,IAAI;EAC/B,MAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC;EAChD,IAAIC,aAAa,CAACG,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;EAC3C,MAAMC,OAAO,GAAG;IACdf,GAAG,EAAE,GAAG;IACRI,IAAI,EAAE,GAAG;IACTF,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE;EACV,CAAC;EACD,OAAOQ,aAAa,CAACK,GAAG,CAACC,IAAI,IAAK,cAAaF,OAAO,CAACE,IAAI,CAAE,EAAC,CAAC;AACjE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACT,QAAQ,EAAEX,QAAQ,GAAG,EAAE,EAAE;EAC9C,MAAMqB,WAAW,GAAG;IAClB,GAAGV;EACL,CAAC;EACDG,MAAM,CAACC,IAAI,CAACJ,QAAQ,CAAC,CAACJ,OAAO,CAACC,CAAC,IAAI;IACjC,IAAIR,QAAQ,CAACsB,QAAQ,CAACd,CAAC,CAAC,EAAE,OAAOa,WAAW,CAACb,CAAC,CAAC;EACjD,CAAC,CAAC;EACF,OAAOa,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASE,gBAAgBA,CAACC,MAAM,EAAEC,UAAU,GAAG,EAAE,EAAEzB,QAAQ,GAAG,EAAE,EAAE;EAChE,IAAI,CAACwB,MAAM,IAAIV,MAAM,CAACC,IAAI,CAACS,MAAM,CAAC,CAACR,MAAM,KAAK,CAAC,EAAE,OAAOS,UAAU;EAClE,OAAO,CAACA,UAAU,IAAI,EAAE,EAAEC,MAAM,CAAChB,SAAS,CAACU,aAAa,CAACI,MAAM,EAAExB,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;AACpF;AAEA,SAASuB,gBAAgB,IAAII,CAAC,EAAElB,eAAe,IAAImB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}