{"ast":null,"code":"import React, { createContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport useMode from './useMode.js';\nconst ThemeContext = /*#__PURE__*/createContext({});\nfunction ThemeProvider({\n  children,\n  defaultMode,\n  storageId,\n  getModeFromStore,\n  setModeToStore\n}) {\n  const {\n    modeSetting,\n    updateMode,\n    toggleMode,\n    modeDisplayed,\n    updateWindowStyles\n  } = useMode({\n    defaultMode,\n    storageId,\n    getModeFromStore,\n    setModeToStore\n  });\n  const memoizedValue = useMemo(() => ({\n    modeSetting,\n    updateMode,\n    toggleMode,\n    modeDisplayed,\n    updateWindowStyles\n  }), [modeSetting, updateMode, toggleMode, modeDisplayed, updateWindowStyles]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: memoizedValue\n  }, children);\n}\nThemeProvider.propTypes = {\n  /**\n   * Default mode value for uncontrolled component.\n   * When user hasn't yet selected a mode (nothing is stored in `localStorage`)\n   * the component will use this value instead.\n   * */\n  defaultMode: PropTypes.oneOf(['light', 'dark', 'auto']),\n  /**\n   * Override for the `localStorage` id used by Screentone.\n   * Normally, you should not need to change this.\n   * Ignored if `getModeFromtStore` or `setModeToStore` are defined.\n   * */\n  storageId: PropTypes.string,\n  /**\n   * Function that fetches the user settings from a store. `() => someInternalState.mode`.\n   * Will default to fetching from `localStorage` if not set.\n   */\n  getModeFromStore: PropTypes.func,\n  /**\n   * Function that accepts a string and writes that into a store. `(m) => someAPI.write(m)`.\n   * Will default to writing to `localStorage` if not set.\n   */\n  setModeToStore: PropTypes.func\n};\nThemeProvider.defaultProps = {\n  storageId: 'st-mode',\n  defaultMode: 'auto',\n  getModeFromStore: null,\n  setModeToStore: null\n};\nexport { ThemeProvider as T, ThemeContext as a };","map":{"version":3,"names":["React","createContext","useMemo","PropTypes","useMode","ThemeContext","ThemeProvider","children","defaultMode","storageId","getModeFromStore","setModeToStore","modeSetting","updateMode","toggleMode","modeDisplayed","updateWindowStyles","memoizedValue","createElement","Provider","value","propTypes","oneOf","string","func","defaultProps","T","a"],"sources":["/Users/mike/node_modules/@screentone/core/es/ThemeProvider-77cdcc21.js"],"sourcesContent":["import React, { createContext, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport useMode from './useMode.js';\n\nconst ThemeContext = /*#__PURE__*/createContext({});\nfunction ThemeProvider({\n  children,\n  defaultMode,\n  storageId,\n  getModeFromStore,\n  setModeToStore\n}) {\n  const {\n    modeSetting,\n    updateMode,\n    toggleMode,\n    modeDisplayed,\n    updateWindowStyles\n  } = useMode({\n    defaultMode,\n    storageId,\n    getModeFromStore,\n    setModeToStore\n  });\n  const memoizedValue = useMemo(() => ({\n    modeSetting,\n    updateMode,\n    toggleMode,\n    modeDisplayed,\n    updateWindowStyles\n  }), [modeSetting, updateMode, toggleMode, modeDisplayed, updateWindowStyles]);\n  return /*#__PURE__*/React.createElement(ThemeContext.Provider, {\n    value: memoizedValue\n  }, children);\n}\nThemeProvider.propTypes = {\n  /**\n   * Default mode value for uncontrolled component.\n   * When user hasn't yet selected a mode (nothing is stored in `localStorage`)\n   * the component will use this value instead.\n   * */\n  defaultMode: PropTypes.oneOf(['light', 'dark', 'auto']),\n  /**\n   * Override for the `localStorage` id used by Screentone.\n   * Normally, you should not need to change this.\n   * Ignored if `getModeFromtStore` or `setModeToStore` are defined.\n   * */\n  storageId: PropTypes.string,\n  /**\n   * Function that fetches the user settings from a store. `() => someInternalState.mode`.\n   * Will default to fetching from `localStorage` if not set.\n   */\n  getModeFromStore: PropTypes.func,\n  /**\n   * Function that accepts a string and writes that into a store. `(m) => someAPI.write(m)`.\n   * Will default to writing to `localStorage` if not set.\n   */\n  setModeToStore: PropTypes.func\n};\nThemeProvider.defaultProps = {\n  storageId: 'st-mode',\n  defaultMode: 'auto',\n  getModeFromStore: null,\n  setModeToStore: null\n};\n\nexport { ThemeProvider as T, ThemeContext as a };\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,OAAO,QAAQ,OAAO;AACrD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,OAAO,MAAM,cAAc;AAElC,MAAMC,YAAY,GAAG,aAAaJ,aAAa,CAAC,CAAC,CAAC,CAAC;AACnD,SAASK,aAAaA,CAAC;EACrBC,QAAQ;EACRC,WAAW;EACXC,SAAS;EACTC,gBAAgB;EAChBC;AACF,CAAC,EAAE;EACD,MAAM;IACJC,WAAW;IACXC,UAAU;IACVC,UAAU;IACVC,aAAa;IACbC;EACF,CAAC,GAAGZ,OAAO,CAAC;IACVI,WAAW;IACXC,SAAS;IACTC,gBAAgB;IAChBC;EACF,CAAC,CAAC;EACF,MAAMM,aAAa,GAAGf,OAAO,CAAC,OAAO;IACnCU,WAAW;IACXC,UAAU;IACVC,UAAU;IACVC,aAAa;IACbC;EACF,CAAC,CAAC,EAAE,CAACJ,WAAW,EAAEC,UAAU,EAAEC,UAAU,EAAEC,aAAa,EAAEC,kBAAkB,CAAC,CAAC;EAC7E,OAAO,aAAahB,KAAK,CAACkB,aAAa,CAACb,YAAY,CAACc,QAAQ,EAAE;IAC7DC,KAAK,EAAEH;EACT,CAAC,EAAEV,QAAQ,CAAC;AACd;AACAD,aAAa,CAACe,SAAS,GAAG;EACxB;AACF;AACA;AACA;AACA;EACEb,WAAW,EAAEL,SAAS,CAACmB,KAAK,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;EACvD;AACF;AACA;AACA;AACA;EACEb,SAAS,EAAEN,SAAS,CAACoB,MAAM;EAC3B;AACF;AACA;AACA;EACEb,gBAAgB,EAAEP,SAAS,CAACqB,IAAI;EAChC;AACF;AACA;AACA;EACEb,cAAc,EAAER,SAAS,CAACqB;AAC5B,CAAC;AACDlB,aAAa,CAACmB,YAAY,GAAG;EAC3BhB,SAAS,EAAE,SAAS;EACpBD,WAAW,EAAE,MAAM;EACnBE,gBAAgB,EAAE,IAAI;EACtBC,cAAc,EAAE;AAClB,CAAC;AAED,SAASL,aAAa,IAAIoB,CAAC,EAAErB,YAAY,IAAIsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}